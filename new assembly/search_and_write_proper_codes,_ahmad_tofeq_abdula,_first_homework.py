 -*- coding: utf-8 -*-
"""search and write proper codes, Ahmad Tofeq Abdula, First homework.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z3ZH1KJZ58xjyObNqnSsW51oGTUW5A8r

# **Name: Ahmad Tofeq Abdulla**

    Digital Image Processing

First Homework I will try do to all tasks use my own abiltys with out use any AI so now am train myself.
"""

#This code use to import data from Google Drive to Google Colab
from google.colab import drive
drive.mount("/content/gdrive")

# First we need to import OpenCV2 to make image proccsing
import cv2

#Also this library help us too much at show and save and analys images
import matplotlib.pyplot as plt

#first task read image
img = cv2.imread("/content/gdrive/MyDrive/Soran_University_Logo.png")
#Mkae sure the image was open in RGB color
imagergb=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
#second task make image gray_scale
imggray=cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
#Applaying gaussian_blur for the gray image use(kernel size 5x5, standard deviation = 0)
img_Gaussian_blur=cv2.GaussianBlur(imggray,(5,5),0)
print(imggray.shape)
print(imagergb.shape)
print(img_Gaussian_blur.shape)

#showing image in all cases
plt.figure(figsize=(10,5))
plt.subplot(3,2,1)
plt.imshow(imagergb)
plt.title("My Image Show use RGB Color")


plt.subplot(3,2,2)
plt.imshow(imggray,cmap='gray')
plt.title("My Image Show use GRAY Color")


plt.subplot(3,2,(3,6))
plt.imshow(img_Gaussian_blur,cmap='gray')
plt.title("My Image Show use GRAY Color with Gaussian Blur")
plt.show()

#Get(edge Canny edge detector to extract edges) from image the threshold 100 you can give ti bettwen 100 to 200 those values are common
im_edge=cv2.Canny(img_Gaussian_blur,100,100)
plt.imshow(im_edge,cmap='gray')
plt.title('In the gray image(edge Canny edge detector to extract edges).')
plt.show()

#First resize the image use resixe method
im_rotat_resize=cv2.resize(im_edge,(300,300))
height, width = im_rotat_resize.shape[:2]

# Compute the center of the image
center = (width/2, height/2)

# Define rotation angle in degrees HRE IF NUMBER IS positive OR negative it make a change. same thing is true for scale
angle = 45

# Calculate rotation matrix
rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1)

# Apply the computed rotation matrix to the image
rotated_image = cv2.warpAffine(im_rotat_resize, rotation_matrix, (width, height))

plt.imshow(rotated_image,cmap='gray')
plt.title("Rotate an Resize Image")
plt.show()

#Last task make you own Custom Filter
#First import numpy
import numpy as np
# Define a sharpening kernel
sharpening_kernel = np.array([[ 0, -1,  0],
                              [-1,  5, -1],
                              [ 0, -1,  0]])

# Define an embossing kernel
embossing_kernel = np.array([[-2, -1,  0],
                             [-1,  1,  1],
                             [ 0,  1,  2]])

# Apply the sharpening filter to the image
sharpened_image = cv2.filter2D(imagergb, -1, sharpening_kernel)

# Apply the embossing filter to the image
embossed_image = cv2.filter2D(imagergb, -1, embossing_kernel)

plt.figure(figsize=(15, 5))

# Display the original image
plt.subplot(1, 3, 1)
plt.imshow(imagergb)
plt.title("Original Image")
plt.axis("off")

# Display the sharpened image
plt.subplot(1, 3, 2)
plt.imshow(sharpened_image)
plt.title("Sharpened Image")
plt.axis("off")

# Display the embossed image
plt.subplot(1, 3, 3)
plt.imshow(embossed_image)
plt.title("Embossed Image")
plt.axis("off")

# Show the plots
plt.show()